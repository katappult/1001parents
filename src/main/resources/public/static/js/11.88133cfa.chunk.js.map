{"version":3,"sources":["routes/all-routes.js","_layouts/AdminLayout/AdminLayout.js"],"names":["Page404","React","lazy","GenericLoginPage","GenericLogoutPage","BackOfficeHomePage","allRoutes","path","exact","name","component","DefaultHeader","AdminLayout","props","state","loadingApplicationContext","commons","sessionId","prevProps","prevState","this","userDoesntHaveSessionId","forwardTLoginPage","userContextRX","userAccount","nickName","loadUserContext","defaultLoginURL","coreUri","clientSideRenderedURL","process","window","location","href","setState","authorization","loginService","postLogin","then","response","userContext","katappult_core_loginSuccess","updateUserContextRX","katappult_core_isUserConnected","hasRoleAdmin","hasRoleSuperAdmin","mainContent","id","className","map","route","idx","key","render","containerId","workingContainer","toastClassName","bodyClassName","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","draggable","pauseOnHover","Component","connect","store","userContextStore","disptach","e","updateUserContext"],"mappings":"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","file":"static/js/11.88133cfa.chunk.js","sourcesContent":["import React from 'react';\n\n// common pages\nconst Page404 = React.lazy(() => import('pages/CommonPages/Page404'));\nconst GenericLoginPage = React.lazy(() => import('pages/CommonPages/LoginPage'));\nconst GenericLogoutPage = React.lazy(() => import('pages/CommonPages/LogoutPage'));\n//const LostPassPage = React.lazy(() => import('pages/CommonPages/LostPassPage'));\n//const ReinitPassPage = React.lazy(() => import('pages/CommonPages/ReinitPassPage/ReinitPassPage.js'));\n//const PeopleRegisterPage = React.lazy(() => import('pages/CommonPages/PeopleRegisterPage/PeopleRegisterPage.js'));\nconst BackOfficeHomePage = React.lazy(() => import('pages/AdminPages/GenericManagementPage'));\n\nconst allRoutes = [\n\n    { path: '/', exact: true, name: 'Admin home', component: BackOfficeHomePage},\n    { path: '/view', exact: true, name: 'Admin', component: BackOfficeHomePage},\n    { path: `/login`, exact: true, name: 'Authentication', component: GenericLoginPage},\n    { path: `/logout`, exact: true, name: 'Authentication', component: GenericLogoutPage},\n    //{ path: `/lostPass`, exact: true, name: 'Lost pass', component: LostPassPage },\n    //{ path: `/lostPassword/:lockToken`, exact: true, name: 'Pass reinit', component: ReinitPassPage },\n    //{ path: `/register/:source`, exact: true, name: 'Register', component: PeopleRegisterPage },\n    { path: '/404', exact: true, name: 'Not found', component: Page404},\n];\n\nexport default allRoutes;\n\n\n\n\n","import React, { Component, Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport { commons } from '_helpers/commons';\nimport allRoutes from 'routes/all-routes';\nimport {loginService} from \"_services/login.services\";\nimport {updateUserContext} from \"_reducers/coreUserContextReducer\";\nimport {coreUri} from \"_helpers/CoreUri\";\n\nconst DefaultHeader = React.lazy(() => import('./AdminLayoutHeader'));\n\nconst mapStateToProps = store => ({\n\tuserContextRX: store.userContextStore.userContext\n});\n\nconst mapDispatchToProps = (disptach) => ({\n\tupdateUserContextRX: (e) => disptach(updateUserContext(e)),\n})\n\nclass AdminLayout extends Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tloadingApplicationContext: true\n\t\t}\n\t}\n\n\tuserDoesntHaveSessionId(){\n\t\tlet sessionId = commons.sessionId();\n\t\treturn !sessionId;\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState){\n\t\tif(!this.state.loadingApplicationContext) {\n\t\t\tif (this.userDoesntHaveSessionId()) {\n\t\t\t\tthis.forwardTLoginPage();\n\t\t\t}\n\t\t\t// the login page has called clearUserContextRX and so the session id was set to not_authentified\n\t\t\t// In this case reload all context\n\t\t\telse if (this.props.userContextRX.sessionId === 'not_authentified' && !this.state.loadingApplicationContext) {\n\t\t\t\tif (this.props.userContextRX.userAccount.nickName) {\n\t\t\t\t\tthis.loadUserContext();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tif(this.userDoesntHaveSessionId()){\n\t\t\tthis.forwardTLoginPage();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.loadUserContext();\n\t}\n\n\tforwardTLoginPage(){\n\t\tlet configuredLoginURL = process.env.REACT_APP_CLIENT_LOGIN_URL;\n\t\tlet defaultLoginURL = coreUri.clientSideRenderedURL('login');\n\t\tif(configuredLoginURL) {\n\t\t\tdefaultLoginURL = configuredLoginURL;\n\t\t}\n\n\t\twindow.location.href = defaultLoginURL;\n\t\t//window.location.reload();\n\t}\n\n\tasync loadUserContext() {\n\t\tthis.setState({loadingApplicationContext : true})\n\t\tlet authorization = commons.sessionId();\n\t\tconst userContext = await loginService.postLogin(authorization).then(response => {\n\t\t\tlet userContext = commons.katappult_core_loginSuccess(response)\n\t\t\tthis.setState({loadingApplicationContext : false})\n\t\t\treturn userContext;\n\t\t});\n\n\t\tthis.props.updateUserContextRX(userContext);\n\t}\n\n   render() {\n\n\t\tif(!this.props.userContextRX || this.props.userContextRX.sessionId === 'not_authentified'){\n\t\t\treturn <>No user context</>;\n\t\t}\n\n\t\tconst isConnected = commons.katappult_core_isUserConnected(this.props.userContextRX);\n\t\tif(!isConnected || !commons.hasRoleAdmin(this.props.userContextRX)\n\t\t  \t|| !commons.hasRoleSuperAdmin(this.props.userContextRX)){\n\t\t  window.location.href = coreUri.clientSideRenderedURL('/login?not_auth');\n\t\t}\n\n\t\tlet mainContent = (\n\t\t  <div id=\"admin-main-content\" className=\"admin-main-content\">\n\t\t\t\t<Suspense>\n\t\t\t\t\t <Switch>\n\t\t\t\t\t   {allRoutes.map((route, idx) => {\n\t\t\t\t\t\t  return  <Route\n\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t\tpath={route.path}\n\t\t\t\t\t\t\t\t\t\texact={route.exact}\n\t\t\t\t\t\t\t\t\t\tname={route.name}\n\t\t\t\t\t\t\t\t\t\trender={props => (\n\t\t\t\t\t\t\t\t\t\t  <route.component {...props}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   containerId={this.props.userContextRX.workingContainer.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   userContext={this.props.userContextRX}/>\n\t\t\t\t\t\t\t\t\t\t)} />\n\n\t\t\t\t\t\t\t})\n\t\t\t\t\t   }\n\t\t\t\t\t </Switch>\n\t\t\t\t</Suspense>\n\t\t </div>\n\t)\n\n    return (\n\t\t<div className=\"app admin-app\">\n\t\t\t<div className=\"app-header\">\n\t\t\t\t<DefaultHeader\n\t\t\t\t\t   {...this.props}\n\t\t\t\t\t   containerId={this.props.userContextRX.workingContainer.id}\n\t\t\t\t\t   userContext={this.props.userContextRX}/>\n\t\t\t</div>\n\n\t\t\t<div className=\"app-body\">\n\t\t\t\t{mainContent}\n\t\t\t</div>\n\n\t\t\t<ToastContainer toastClassName={\"our-toast\"}\n\t\t\t\t\tbodyClassName={\"our-toast-2\"}\n\t\t\t\t\tposition={'top-center'}\n\t\t\t\t\tautoClose={2000}\n\t\t\t\t\thideProgressBar={true}\n\t\t\t\t\tnewestOnTop={false}\n\t\t\t\t\tcloseOnClick\n\t\t\t\t\tdraggable\n\t\t\t\t\tpauseOnHover/>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (AdminLayout);\n"],"sourceRoot":""}